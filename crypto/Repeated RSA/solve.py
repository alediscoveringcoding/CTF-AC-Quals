import math

# Given values
e = 65537
c = 19982754603604741814788132356163872545464566920479373936072502796604108196725417201298238121119586713210732996270278257023124307334537840832454452516712002655663409844315105300012257017186675339811708793448207020643871350959299599604015064612140798265018450214496836511344193253904621430556718005293507476068379736033948735652482357400987702173694633014411824508876848772256322708718088853894024685764557786835367794139759915196535650959414961838452322267548951885789976395638278678311459649622403138878031311031564671585885892433542679662923400588746354379829209284356184408297362634534913643684412375014433409414802
n1 = 22260948725160001796724162576053410929128140847475874871524505564092707165839176481412329069148568406753933133894090846350557773927020282560586240072770183420902469225355422205591215491886411331509378247464406577403668720956478633834729944104421919928648538856236946715415232340098556286770366892458573371130820529916315456511410130758732847146004492715942588866131532629346569829409042335098684716683432977172270171698085368286774807014398767767467950032623502496666896248542495744891190212404752906639228978764425710439864431148355000226840870017020065397144247019272506111407852818575553671283080715669802399128119
n2 = 18584363131364542787050632001245010413744040017482367750010005811184689981762150217271881975121264237648094871426527074958143653828028063133433101998563587768240429857006914627031631720290096142604499535966419756654384984289817661532174074313396791097621017193887864468417766659579384192198706034375819267000816583210361646250313196110024922242885786995534082073906029577171896165387810897646229412607980186349717972009753979249089671881963167105092547301486022337279050700558343839232737278140534911754580651827299266170184879935866183886534249002885390559880545095182320393708072827517747771449243313335299986913783
n3 = 25686885877830311412806743025961077816660643361063968208748625770590743940872889996451581616274192081964557772751360190807596404176675482900896726583719030116802448215646424155130326871915586282977186369028106644683105234783931925034193758005081921358587465436674984107438693416384647867248840034418360145831146379887431735823219730666218120165000675325657542059455188805714899710750751254042985324620075049800553555685966318389521507768844493640681093990936344684289261531935488906738469206528587972771695452632498994925587620629827086709014715146358000323719258936829089141672758964819216082499590974637822690011777

# Step 1: Find common factors
p = math.gcd(n1, n3)
q = math.gcd(n1, n2)
r = math.gcd(n2, n3)

# Verify factorizations
assert n1 == p * q
assert n2 == q * r
assert n3 == r * p

# Step 2: Compute Euler's totient functions
phi_n1 = (p-1) * (q-1)
phi_n2 = (q-1) * (r-1)
phi_n3 = (r-1) * (p-1)

# Step 3: Compute private exponents
d1 = pow(e, -1, phi_n1)
d2 = pow(e, -1, phi_n2)
d3 = pow(e, -1, phi_n3)

# Step 4: Decrypt step by step
c2 = pow(c, d3, n3)   # Decrypt with n3 to get c2
c1 = pow(c2, d2, n2)  # Decrypt with n2 to get c1
m = pow(c1, d1, n1)   # Decrypt with n1 to get the plaintext

# Convert integer to bytes and then to string
flag = m.to_bytes((m.bit_length() + 7) // 8, 'big').decode()
print(flag)